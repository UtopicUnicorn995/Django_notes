--Creates a new Django project
django-admin startproject mysite

--Creates an Django app from the project
python manage.py startapp challenges

--starts the django server
python manage.py runserver


^^ extension
    can help with the templates

Do not delete any of the files for the Django project

related to local development server
    asgi.py
    wsgi.py


db.sqlite3 is a dummy database

Django is a modular structures
Add multiple apps
we can create as many apps

"App" ~= "Module"

python manage.py startapp challenges


URL Config/Routes: URL-action mappings which ensure that certain results are 'achieved' when certain URLs are entered by the user
URLS are responsible for defining the URLs we wanna support and the actions that should be triggered
Views are basically those actions
Views are all about holding the concrete logic
Views is just a function or Class

URLS files is defaultly created when creating a new project
(can add url file to it's application folder)

steps on creating urls and Views go to urls.py of application or main application
django.urls import path, include -> path is for the relative path -> include adds a new path and where it is located

from views.py
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse

reverse() -> allows us to build urls dynamically -> identify them by (name)

django templates
    --Are html files 
    --Convension in adding html file -> app folder 
        --template\appName\appName.html
    --Read file, extract the html content and store that in a string -> send back as response
        <--from django.template.loader import render_to_string-->
        --To setup base directory -> goto the main folder and to settings.py
                X--'DIRS': [BASE_DIR / "challenges" / "templates"],
                /--Add app name to the Installed_apps in settings.py
        if you have a template folder outside the app, being used by multiple app -> you could add folder to dirs


DTL -> Django template language
Enhanced HTML files to create dynamic pages
inside the html file:
    -- {{}} is used when injecting a dynamic file -> Add the key text
        -- Also called as interpolation
    -- You cannot use a python function inside an html file
        --django has a built in tags and filters
        --filters are adjustments you can apply to the interpolated value -> filters can be applied as functions in the HTML file
        
Template inheritance
    If you want to have a same HTML file but with a different dynamic value
    If it's a template that you want to share across all apps
        -- Create a templates folder outside the individial app
        
Includes
    HTML template snippets that you want to add somewhere in your code
        --Why? Sometimes you want to have a component somewhere else but not in all pages
        include folder inside the app folder
        variable from the included parent can also be used by the include snippet

from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect, Http404
    Http404 is a shortcut -> check views.py for reference


For styling
    typically add CSS but not by adding css tags -> add css files that holds our css codes
    add static folder at the root
        static/challenges/challenges.css
    for this to apply
        go to installed_apps in settings.py
            make sure that django.contrib.staticfiles is there
            make sure that STATIC_URL is there

        in the page that you want to plug in an extra functionality add {% load static %}
            for css files add a link element
    
    to add a global static file
        create a static folder at the root of main app
        problem: The STATIC_URL settings does not look for a global folder
        to make django aware of this folder
            add a setting:
                STATICFILES_DIRS = [
                    BASE_DIR / "static"
                ]


"SLUGS" always look something like this:
my-post-is-here => SEO-friendly unique identifiers